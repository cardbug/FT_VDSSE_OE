// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FT_VDSSE.proto
#ifndef GRPC_FT_5fVDSSE_2eproto__INCLUDED
#define GRPC_FT_5fVDSSE_2eproto__INCLUDED

#include "FT_VDSSE.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace FT_VDSSE {

class RPC final {
 public:
  static constexpr char const* service_full_name() {
    return "FT_VDSSE.RPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Search
    std::unique_ptr< ::grpc::ClientReaderInterface< ::FT_VDSSE::SearchReply>> search(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::FT_VDSSE::SearchReply>>(searchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FT_VDSSE::SearchReply>> Asyncsearch(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FT_VDSSE::SearchReply>>(AsyncsearchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FT_VDSSE::SearchReply>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::FT_VDSSE::SearchReply>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    // Update
    virtual ::grpc::Status update(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::FT_VDSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>> Asyncupdate(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>> PrepareAsyncupdate(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>>(PrepareAsyncupdateRaw(context, request, cq));
    }
    virtual ::grpc::Status update2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::FT_VDSSE::ExecuteStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>> Asyncupdate2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>>(Asyncupdate2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>> PrepareAsyncupdate2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>>(PrepareAsyncupdate2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::FT_VDSSE::UpdateRequestMessage>> batch_update(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::FT_VDSSE::UpdateRequestMessage>>(batch_updateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::FT_VDSSE::UpdateRequestMessage>> Asyncbatch_update(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::FT_VDSSE::UpdateRequestMessage>>(Asyncbatch_updateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::FT_VDSSE::UpdateRequestMessage>> PrepareAsyncbatch_update(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::FT_VDSSE::UpdateRequestMessage>>(PrepareAsyncbatch_updateRaw(context, response, cq));
    }
    virtual ::grpc::Status SendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::FT_VDSSE::DataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::DataResponse>> AsyncSendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::DataResponse>>(AsyncSendDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::DataResponse>> PrepareAsyncSendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::DataResponse>>(PrepareAsyncSendDataRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Search
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void search(::grpc::ClientContext* context, ::FT_VDSSE::SearchRequestMessage* request, ::grpc::ClientReadReactor< ::FT_VDSSE::SearchReply>* reactor) = 0;
      #else
      virtual void search(::grpc::ClientContext* context, ::FT_VDSSE::SearchRequestMessage* request, ::grpc::experimental::ClientReadReactor< ::FT_VDSSE::SearchReply>* reactor) = 0;
      #endif
      // Update
      virtual void update(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void update(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void update(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void update2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void update2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void update2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void update2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void update2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void update2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void batch_update(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::FT_VDSSE::UpdateRequestMessage>* reactor) = 0;
      #else
      virtual void batch_update(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::experimental::ClientWriteReactor< ::FT_VDSSE::UpdateRequestMessage>* reactor) = 0;
      #endif
      virtual void SendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest* request, ::FT_VDSSE::DataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::DataResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest* request, ::FT_VDSSE::DataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest* request, ::FT_VDSSE::DataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::DataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::DataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::FT_VDSSE::SearchReply>* searchRaw(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::FT_VDSSE::SearchReply>* AsyncsearchRaw(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::FT_VDSSE::SearchReply>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>* AsyncupdateRaw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>* PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>* Asyncupdate2Raw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::ExecuteStatus>* PrepareAsyncupdate2Raw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::FT_VDSSE::UpdateRequestMessage>* batch_updateRaw(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::FT_VDSSE::UpdateRequestMessage>* Asyncbatch_updateRaw(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::FT_VDSSE::UpdateRequestMessage>* PrepareAsyncbatch_updateRaw(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::DataResponse>* AsyncSendDataRaw(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::FT_VDSSE::DataResponse>* PrepareAsyncSendDataRaw(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::FT_VDSSE::SearchReply>> search(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::FT_VDSSE::SearchReply>>(searchRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::FT_VDSSE::SearchReply>> Asyncsearch(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::FT_VDSSE::SearchReply>>(AsyncsearchRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::FT_VDSSE::SearchReply>> PrepareAsyncsearch(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::FT_VDSSE::SearchReply>>(PrepareAsyncsearchRaw(context, request, cq));
    }
    ::grpc::Status update(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::FT_VDSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>> Asyncupdate(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>>(AsyncupdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>> PrepareAsyncupdate(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>>(PrepareAsyncupdateRaw(context, request, cq));
    }
    ::grpc::Status update2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::FT_VDSSE::ExecuteStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>> Asyncupdate2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>>(Asyncupdate2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>> PrepareAsyncupdate2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>>(PrepareAsyncupdate2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::FT_VDSSE::UpdateRequestMessage>> batch_update(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::FT_VDSSE::UpdateRequestMessage>>(batch_updateRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::FT_VDSSE::UpdateRequestMessage>> Asyncbatch_update(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::FT_VDSSE::UpdateRequestMessage>>(Asyncbatch_updateRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::FT_VDSSE::UpdateRequestMessage>> PrepareAsyncbatch_update(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::FT_VDSSE::UpdateRequestMessage>>(PrepareAsyncbatch_updateRaw(context, response, cq));
    }
    ::grpc::Status SendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::FT_VDSSE::DataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::DataResponse>> AsyncSendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::DataResponse>>(AsyncSendDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::DataResponse>> PrepareAsyncSendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::DataResponse>>(PrepareAsyncSendDataRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void search(::grpc::ClientContext* context, ::FT_VDSSE::SearchRequestMessage* request, ::grpc::ClientReadReactor< ::FT_VDSSE::SearchReply>* reactor) override;
      #else
      void search(::grpc::ClientContext* context, ::FT_VDSSE::SearchRequestMessage* request, ::grpc::experimental::ClientReadReactor< ::FT_VDSSE::SearchReply>* reactor) override;
      #endif
      void update(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void update(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void update(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void update(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void update2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      void update2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void update2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void update2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void update2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void update2(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::ExecuteStatus* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void batch_update(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::ClientWriteReactor< ::FT_VDSSE::UpdateRequestMessage>* reactor) override;
      #else
      void batch_update(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::experimental::ClientWriteReactor< ::FT_VDSSE::UpdateRequestMessage>* reactor) override;
      #endif
      void SendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest* request, ::FT_VDSSE::DataResponse* response, std::function<void(::grpc::Status)>) override;
      void SendData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::DataResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest* request, ::FT_VDSSE::DataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest* request, ::FT_VDSSE::DataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::DataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendData(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::FT_VDSSE::DataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::FT_VDSSE::SearchReply>* searchRaw(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request) override;
    ::grpc::ClientAsyncReader< ::FT_VDSSE::SearchReply>* AsyncsearchRaw(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::FT_VDSSE::SearchReply>* PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>* AsyncupdateRaw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>* PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>* Asyncupdate2Raw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>* PrepareAsyncupdate2Raw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::FT_VDSSE::UpdateRequestMessage>* batch_updateRaw(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response) override;
    ::grpc::ClientAsyncWriter< ::FT_VDSSE::UpdateRequestMessage>* Asyncbatch_updateRaw(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::FT_VDSSE::UpdateRequestMessage>* PrepareAsyncbatch_updateRaw(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::DataResponse>* AsyncSendDataRaw(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::FT_VDSSE::DataResponse>* PrepareAsyncSendDataRaw(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_search_;
    const ::grpc::internal::RpcMethod rpcmethod_update_;
    const ::grpc::internal::RpcMethod rpcmethod_update2_;
    const ::grpc::internal::RpcMethod rpcmethod_batch_update_;
    const ::grpc::internal::RpcMethod rpcmethod_SendData_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Search
    virtual ::grpc::Status search(::grpc::ServerContext* context, const ::FT_VDSSE::SearchRequestMessage* request, ::grpc::ServerWriter< ::FT_VDSSE::SearchReply>* writer);
    // Update
    virtual ::grpc::Status update(::grpc::ServerContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response);
    virtual ::grpc::Status update2(::grpc::ServerContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response);
    virtual ::grpc::Status batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::FT_VDSSE::UpdateRequestMessage>* reader, ::FT_VDSSE::ExecuteStatus* response);
    virtual ::grpc::Status SendData(::grpc::ServerContext* context, const ::FT_VDSSE::DataRequest* request, ::FT_VDSSE::DataResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_search() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::FT_VDSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::FT_VDSSE::SearchRequestMessage* request, ::grpc::ServerAsyncWriter< ::FT_VDSSE::SearchReply>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_update() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::FT_VDSSE::UpdateRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::FT_VDSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_update2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_update2() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_update2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update2(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate2(::grpc::ServerContext* context, ::FT_VDSSE::UpdateRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::FT_VDSSE::ExecuteStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_batch_update() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::FT_VDSSE::UpdateRequestMessage>* /*reader*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::FT_VDSSE::ExecuteStatus, ::FT_VDSSE::UpdateRequestMessage>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendData() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SendData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendData(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::DataRequest* /*request*/, ::FT_VDSSE::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendData(::grpc::ServerContext* context, ::FT_VDSSE::DataRequest* request, ::grpc::ServerAsyncResponseWriter< ::FT_VDSSE::DataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_search<WithAsyncMethod_update<WithAsyncMethod_update2<WithAsyncMethod_batch_update<WithAsyncMethod_SendData<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_search() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::FT_VDSSE::SearchRequestMessage, ::FT_VDSSE::SearchReply>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::FT_VDSSE::SearchRequestMessage* request) { return this->search(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::FT_VDSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::FT_VDSSE::SearchReply>* search(
      ::grpc::CallbackServerContext* /*context*/, const ::FT_VDSSE::SearchRequestMessage* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::FT_VDSSE::SearchReply>* search(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::FT_VDSSE::SearchRequestMessage* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_update() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response) { return this->update(context, request, response); }));}
    void SetMessageAllocatorFor_update(
        ::grpc::experimental::MessageAllocator< ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* update(
      ::grpc::CallbackServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* update(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_update2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_update2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response) { return this->update2(context, request, response); }));}
    void SetMessageAllocatorFor_update2(
        ::grpc::experimental::MessageAllocator< ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_update2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update2(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* update2(
      ::grpc::CallbackServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* update2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_batch_update() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::FT_VDSSE::ExecuteStatus* response) { return this->batch_update(context, response); }));
    }
    ~ExperimentalWithCallbackMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::FT_VDSSE::UpdateRequestMessage>* /*reader*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::FT_VDSSE::UpdateRequestMessage>* batch_update(
      ::grpc::CallbackServerContext* /*context*/, ::FT_VDSSE::ExecuteStatus* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::FT_VDSSE::UpdateRequestMessage>* batch_update(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::FT_VDSSE::ExecuteStatus* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::FT_VDSSE::DataRequest, ::FT_VDSSE::DataResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::FT_VDSSE::DataRequest* request, ::FT_VDSSE::DataResponse* response) { return this->SendData(context, request, response); }));}
    void SetMessageAllocatorFor_SendData(
        ::grpc::experimental::MessageAllocator< ::FT_VDSSE::DataRequest, ::FT_VDSSE::DataResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::FT_VDSSE::DataRequest, ::FT_VDSSE::DataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendData(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::DataRequest* /*request*/, ::FT_VDSSE::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendData(
      ::grpc::CallbackServerContext* /*context*/, const ::FT_VDSSE::DataRequest* /*request*/, ::FT_VDSSE::DataResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::FT_VDSSE::DataRequest* /*request*/, ::FT_VDSSE::DataResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_search<ExperimentalWithCallbackMethod_update<ExperimentalWithCallbackMethod_update2<ExperimentalWithCallbackMethod_batch_update<ExperimentalWithCallbackMethod_SendData<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_search<ExperimentalWithCallbackMethod_update<ExperimentalWithCallbackMethod_update2<ExperimentalWithCallbackMethod_batch_update<ExperimentalWithCallbackMethod_SendData<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_search() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::FT_VDSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_update() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_update2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_update2() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_update2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update2(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_batch_update() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::FT_VDSSE::UpdateRequestMessage>* /*reader*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendData() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SendData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendData(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::DataRequest* /*request*/, ::FT_VDSSE::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_search() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::FT_VDSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestsearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_update() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_update2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_update2() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_update2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update2(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestupdate2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_batch_update() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::FT_VDSSE::UpdateRequestMessage>* /*reader*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestbatch_update(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendData() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SendData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendData(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::DataRequest* /*request*/, ::FT_VDSSE::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_search() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->search(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::FT_VDSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* search(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* search(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_update() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->update(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* update(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* update(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_update2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_update2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->update2(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_update2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status update2(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* update2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* update2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_batch_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_batch_update() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, ::grpc::ByteBuffer* response) { return this->batch_update(context, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_batch_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status batch_update(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::FT_VDSSE::UpdateRequestMessage>* /*reader*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* batch_update(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer>* batch_update(
      ::grpc::experimental::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendData(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::DataRequest* /*request*/, ::FT_VDSSE::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_update() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>(std::bind(&WithStreamedUnaryMethod_update<BaseClass>::Streamedupdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status update(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedupdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FT_VDSSE::UpdateRequestMessage,::FT_VDSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_update2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_update2() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>(std::bind(&WithStreamedUnaryMethod_update2<BaseClass>::Streamedupdate2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_update2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status update2(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::UpdateRequestMessage* /*request*/, ::FT_VDSSE::ExecuteStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedupdate2(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FT_VDSSE::UpdateRequestMessage,::FT_VDSSE::ExecuteStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendData() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::FT_VDSSE::DataRequest, ::FT_VDSSE::DataResponse>(std::bind(&WithStreamedUnaryMethod_SendData<BaseClass>::StreamedSendData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendData(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::DataRequest* /*request*/, ::FT_VDSSE::DataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::FT_VDSSE::DataRequest,::FT_VDSSE::DataResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_update2<WithStreamedUnaryMethod_SendData<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_search() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::FT_VDSSE::SearchRequestMessage, ::FT_VDSSE::SearchReply>(std::bind(&WithSplitStreamingMethod_search<BaseClass>::Streamedsearch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status search(::grpc::ServerContext* /*context*/, const ::FT_VDSSE::SearchRequestMessage* /*request*/, ::grpc::ServerWriter< ::FT_VDSSE::SearchReply>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status Streamedsearch(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::FT_VDSSE::SearchRequestMessage,::FT_VDSSE::SearchReply>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_search<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_search<WithStreamedUnaryMethod_update<WithStreamedUnaryMethod_update2<WithStreamedUnaryMethod_SendData<Service > > > > StreamedService;
};

}  // namespace FT_VDSSE


#endif  // GRPC_FT_5fVDSSE_2eproto__INCLUDED
