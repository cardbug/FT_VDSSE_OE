// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FT_VDSSE.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_FT_5fVDSSE_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_FT_5fVDSSE_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_FT_5fVDSSE_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_FT_5fVDSSE_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_FT_5fVDSSE_2eproto;
namespace FT_VDSSE {
class DataRequest;
class DataRequestDefaultTypeInternal;
extern DataRequestDefaultTypeInternal _DataRequest_default_instance_;
class DataResponse;
class DataResponseDefaultTypeInternal;
extern DataResponseDefaultTypeInternal _DataResponse_default_instance_;
class ExecuteStatus;
class ExecuteStatusDefaultTypeInternal;
extern ExecuteStatusDefaultTypeInternal _ExecuteStatus_default_instance_;
class SearchReply;
class SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchRequestMessage;
class SearchRequestMessageDefaultTypeInternal;
extern SearchRequestMessageDefaultTypeInternal _SearchRequestMessage_default_instance_;
class UpdateRequestMessage;
class UpdateRequestMessageDefaultTypeInternal;
extern UpdateRequestMessageDefaultTypeInternal _UpdateRequestMessage_default_instance_;
}  // namespace FT_VDSSE
PROTOBUF_NAMESPACE_OPEN
template<> ::FT_VDSSE::DataRequest* Arena::CreateMaybeMessage<::FT_VDSSE::DataRequest>(Arena*);
template<> ::FT_VDSSE::DataResponse* Arena::CreateMaybeMessage<::FT_VDSSE::DataResponse>(Arena*);
template<> ::FT_VDSSE::ExecuteStatus* Arena::CreateMaybeMessage<::FT_VDSSE::ExecuteStatus>(Arena*);
template<> ::FT_VDSSE::SearchReply* Arena::CreateMaybeMessage<::FT_VDSSE::SearchReply>(Arena*);
template<> ::FT_VDSSE::SearchRequestMessage* Arena::CreateMaybeMessage<::FT_VDSSE::SearchRequestMessage>(Arena*);
template<> ::FT_VDSSE::UpdateRequestMessage* Arena::CreateMaybeMessage<::FT_VDSSE::UpdateRequestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace FT_VDSSE {

// ===================================================================

class DataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FT_VDSSE.DataRequest) */ {
 public:
  DataRequest();
  virtual ~DataRequest();

  DataRequest(const DataRequest& from);
  DataRequest(DataRequest&& from) noexcept
    : DataRequest() {
    *this = ::std::move(from);
  }

  inline DataRequest& operator=(const DataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRequest& operator=(DataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataRequest* internal_default_instance() {
    return reinterpret_cast<const DataRequest*>(
               &_DataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataRequest& a, DataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataRequest* New() const final {
    return CreateMaybeMessage<DataRequest>(nullptr);
  }

  DataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataRequest& from);
  void MergeFrom(const DataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FT_VDSSE.DataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FT_5fVDSSE_2eproto);
    return ::descriptor_table_FT_5fVDSSE_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputContentFieldNumber = 1,
  };
  // bytes input_content = 1;
  void clear_input_content();
  const std::string& input_content() const;
  void set_input_content(const std::string& value);
  void set_input_content(std::string&& value);
  void set_input_content(const char* value);
  void set_input_content(const void* value, size_t size);
  std::string* mutable_input_content();
  std::string* release_input_content();
  void set_allocated_input_content(std::string* input_content);
  private:
  const std::string& _internal_input_content() const;
  void _internal_set_input_content(const std::string& value);
  std::string* _internal_mutable_input_content();
  public:

  // @@protoc_insertion_point(class_scope:FT_VDSSE.DataRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FT_5fVDSSE_2eproto;
};
// -------------------------------------------------------------------

class DataResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FT_VDSSE.DataResponse) */ {
 public:
  DataResponse();
  virtual ~DataResponse();

  DataResponse(const DataResponse& from);
  DataResponse(DataResponse&& from) noexcept
    : DataResponse() {
    *this = ::std::move(from);
  }

  inline DataResponse& operator=(const DataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataResponse& operator=(DataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataResponse* internal_default_instance() {
    return reinterpret_cast<const DataResponse*>(
               &_DataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DataResponse& a, DataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DataResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataResponse* New() const final {
    return CreateMaybeMessage<DataResponse>(nullptr);
  }

  DataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataResponse& from);
  void MergeFrom(const DataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FT_VDSSE.DataResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FT_5fVDSSE_2eproto);
    return ::descriptor_table_FT_5fVDSSE_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:FT_VDSSE.DataResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FT_5fVDSSE_2eproto;
};
// -------------------------------------------------------------------

class SearchRequestMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FT_VDSSE.SearchRequestMessage) */ {
 public:
  SearchRequestMessage();
  virtual ~SearchRequestMessage();

  SearchRequestMessage(const SearchRequestMessage& from);
  SearchRequestMessage(SearchRequestMessage&& from) noexcept
    : SearchRequestMessage() {
    *this = ::std::move(from);
  }

  inline SearchRequestMessage& operator=(const SearchRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequestMessage& operator=(SearchRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SearchRequestMessage*>(
               &_SearchRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchRequestMessage& a, SearchRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequestMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequestMessage* New() const final {
    return CreateMaybeMessage<SearchRequestMessage>(nullptr);
  }

  SearchRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequestMessage& from);
  void MergeFrom(const SearchRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FT_VDSSE.SearchRequestMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FT_5fVDSSE_2eproto);
    return ::descriptor_table_FT_5fVDSSE_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwFieldNumber = 1,
    kStFieldNumber = 2,
    kC1FieldNumber = 3,
    kFirstFieldNumber = 4,
  };
  // bytes sw = 1;
  void clear_sw();
  const std::string& sw() const;
  void set_sw(const std::string& value);
  void set_sw(std::string&& value);
  void set_sw(const char* value);
  void set_sw(const void* value, size_t size);
  std::string* mutable_sw();
  std::string* release_sw();
  void set_allocated_sw(std::string* sw);
  private:
  const std::string& _internal_sw() const;
  void _internal_set_sw(const std::string& value);
  std::string* _internal_mutable_sw();
  public:

  // bytes st = 2;
  void clear_st();
  const std::string& st() const;
  void set_st(const std::string& value);
  void set_st(std::string&& value);
  void set_st(const char* value);
  void set_st(const void* value, size_t size);
  std::string* mutable_st();
  std::string* release_st();
  void set_allocated_st(std::string* st);
  private:
  const std::string& _internal_st() const;
  void _internal_set_st(const std::string& value);
  std::string* _internal_mutable_st();
  public:

  // uint32 c1 = 3;
  void clear_c1();
  ::PROTOBUF_NAMESPACE_ID::uint32 c1() const;
  void set_c1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_c1() const;
  void _internal_set_c1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool first = 4;
  void clear_first();
  bool first() const;
  void set_first(bool value);
  private:
  bool _internal_first() const;
  void _internal_set_first(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FT_VDSSE.SearchRequestMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sw_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr st_;
  ::PROTOBUF_NAMESPACE_ID::uint32 c1_;
  bool first_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FT_5fVDSSE_2eproto;
};
// -------------------------------------------------------------------

class SearchReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FT_VDSSE.SearchReply) */ {
 public:
  SearchReply();
  virtual ~SearchReply();

  SearchReply(const SearchReply& from);
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchReply* New() const final {
    return CreateMaybeMessage<SearchReply>(nullptr);
  }

  SearchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchReply& from);
  void MergeFrom(const SearchReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FT_VDSSE.SearchReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FT_5fVDSSE_2eproto);
    return ::descriptor_table_FT_5fVDSSE_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndFieldNumber = 1,
    kProofFieldNumber = 2,
  };
  // bytes ind = 1;
  void clear_ind();
  const std::string& ind() const;
  void set_ind(const std::string& value);
  void set_ind(std::string&& value);
  void set_ind(const char* value);
  void set_ind(const void* value, size_t size);
  std::string* mutable_ind();
  std::string* release_ind();
  void set_allocated_ind(std::string* ind);
  private:
  const std::string& _internal_ind() const;
  void _internal_set_ind(const std::string& value);
  std::string* _internal_mutable_ind();
  public:

  // bytes proof = 2;
  void clear_proof();
  const std::string& proof() const;
  void set_proof(const std::string& value);
  void set_proof(std::string&& value);
  void set_proof(const char* value);
  void set_proof(const void* value, size_t size);
  std::string* mutable_proof();
  std::string* release_proof();
  void set_allocated_proof(std::string* proof);
  private:
  const std::string& _internal_proof() const;
  void _internal_set_proof(const std::string& value);
  std::string* _internal_mutable_proof();
  public:

  // @@protoc_insertion_point(class_scope:FT_VDSSE.SearchReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FT_5fVDSSE_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequestMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FT_VDSSE.UpdateRequestMessage) */ {
 public:
  UpdateRequestMessage();
  virtual ~UpdateRequestMessage();

  UpdateRequestMessage(const UpdateRequestMessage& from);
  UpdateRequestMessage(UpdateRequestMessage&& from) noexcept
    : UpdateRequestMessage() {
    *this = ::std::move(from);
  }

  inline UpdateRequestMessage& operator=(const UpdateRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequestMessage& operator=(UpdateRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRequestMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateRequestMessage*>(
               &_UpdateRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateRequestMessage& a, UpdateRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequestMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRequestMessage* New() const final {
    return CreateMaybeMessage<UpdateRequestMessage>(nullptr);
  }

  UpdateRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRequestMessage& from);
  void MergeFrom(const UpdateRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FT_VDSSE.UpdateRequestMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FT_5fVDSSE_2eproto);
    return ::descriptor_table_FT_5fVDSSE_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLFieldNumber = 1,
    kEFieldNumber = 2,
    kProofFieldNumber = 3,
  };
  // bytes l = 1;
  void clear_l();
  const std::string& l() const;
  void set_l(const std::string& value);
  void set_l(std::string&& value);
  void set_l(const char* value);
  void set_l(const void* value, size_t size);
  std::string* mutable_l();
  std::string* release_l();
  void set_allocated_l(std::string* l);
  private:
  const std::string& _internal_l() const;
  void _internal_set_l(const std::string& value);
  std::string* _internal_mutable_l();
  public:

  // bytes e = 2;
  void clear_e();
  const std::string& e() const;
  void set_e(const std::string& value);
  void set_e(std::string&& value);
  void set_e(const char* value);
  void set_e(const void* value, size_t size);
  std::string* mutable_e();
  std::string* release_e();
  void set_allocated_e(std::string* e);
  private:
  const std::string& _internal_e() const;
  void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();
  public:

  // bytes proof = 3;
  void clear_proof();
  const std::string& proof() const;
  void set_proof(const std::string& value);
  void set_proof(std::string&& value);
  void set_proof(const char* value);
  void set_proof(const void* value, size_t size);
  std::string* mutable_proof();
  std::string* release_proof();
  void set_allocated_proof(std::string* proof);
  private:
  const std::string& _internal_proof() const;
  void _internal_set_proof(const std::string& value);
  std::string* _internal_mutable_proof();
  public:

  // @@protoc_insertion_point(class_scope:FT_VDSSE.UpdateRequestMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr l_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proof_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FT_5fVDSSE_2eproto;
};
// -------------------------------------------------------------------

class ExecuteStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:FT_VDSSE.ExecuteStatus) */ {
 public:
  ExecuteStatus();
  virtual ~ExecuteStatus();

  ExecuteStatus(const ExecuteStatus& from);
  ExecuteStatus(ExecuteStatus&& from) noexcept
    : ExecuteStatus() {
    *this = ::std::move(from);
  }

  inline ExecuteStatus& operator=(const ExecuteStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExecuteStatus& operator=(ExecuteStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExecuteStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExecuteStatus* internal_default_instance() {
    return reinterpret_cast<const ExecuteStatus*>(
               &_ExecuteStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ExecuteStatus& a, ExecuteStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ExecuteStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExecuteStatus* New() const final {
    return CreateMaybeMessage<ExecuteStatus>(nullptr);
  }

  ExecuteStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExecuteStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExecuteStatus& from);
  void MergeFrom(const ExecuteStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExecuteStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "FT_VDSSE.ExecuteStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_FT_5fVDSSE_2eproto);
    return ::descriptor_table_FT_5fVDSSE_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:FT_VDSSE.ExecuteStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_FT_5fVDSSE_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataRequest

// bytes input_content = 1;
inline void DataRequest::clear_input_content() {
  input_content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataRequest::input_content() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.DataRequest.input_content)
  return _internal_input_content();
}
inline void DataRequest::set_input_content(const std::string& value) {
  _internal_set_input_content(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.DataRequest.input_content)
}
inline std::string* DataRequest::mutable_input_content() {
  // @@protoc_insertion_point(field_mutable:FT_VDSSE.DataRequest.input_content)
  return _internal_mutable_input_content();
}
inline const std::string& DataRequest::_internal_input_content() const {
  return input_content_.GetNoArena();
}
inline void DataRequest::_internal_set_input_content(const std::string& value) {
  
  input_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataRequest::set_input_content(std::string&& value) {
  
  input_content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FT_VDSSE.DataRequest.input_content)
}
inline void DataRequest::set_input_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FT_VDSSE.DataRequest.input_content)
}
inline void DataRequest::set_input_content(const void* value, size_t size) {
  
  input_content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FT_VDSSE.DataRequest.input_content)
}
inline std::string* DataRequest::_internal_mutable_input_content() {
  
  return input_content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataRequest::release_input_content() {
  // @@protoc_insertion_point(field_release:FT_VDSSE.DataRequest.input_content)
  
  return input_content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataRequest::set_allocated_input_content(std::string* input_content) {
  if (input_content != nullptr) {
    
  } else {
    
  }
  input_content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_content);
  // @@protoc_insertion_point(field_set_allocated:FT_VDSSE.DataRequest.input_content)
}

// -------------------------------------------------------------------

// DataResponse

// string message = 1;
inline void DataResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataResponse::message() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.DataResponse.message)
  return _internal_message();
}
inline void DataResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.DataResponse.message)
}
inline std::string* DataResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:FT_VDSSE.DataResponse.message)
  return _internal_mutable_message();
}
inline const std::string& DataResponse::_internal_message() const {
  return message_.GetNoArena();
}
inline void DataResponse::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataResponse::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FT_VDSSE.DataResponse.message)
}
inline void DataResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FT_VDSSE.DataResponse.message)
}
inline void DataResponse::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FT_VDSSE.DataResponse.message)
}
inline std::string* DataResponse::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataResponse::release_message() {
  // @@protoc_insertion_point(field_release:FT_VDSSE.DataResponse.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:FT_VDSSE.DataResponse.message)
}

// -------------------------------------------------------------------

// SearchRequestMessage

// bytes sw = 1;
inline void SearchRequestMessage::clear_sw() {
  sw_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequestMessage::sw() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.SearchRequestMessage.sw)
  return _internal_sw();
}
inline void SearchRequestMessage::set_sw(const std::string& value) {
  _internal_set_sw(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.SearchRequestMessage.sw)
}
inline std::string* SearchRequestMessage::mutable_sw() {
  // @@protoc_insertion_point(field_mutable:FT_VDSSE.SearchRequestMessage.sw)
  return _internal_mutable_sw();
}
inline const std::string& SearchRequestMessage::_internal_sw() const {
  return sw_.GetNoArena();
}
inline void SearchRequestMessage::_internal_set_sw(const std::string& value) {
  
  sw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchRequestMessage::set_sw(std::string&& value) {
  
  sw_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FT_VDSSE.SearchRequestMessage.sw)
}
inline void SearchRequestMessage::set_sw(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FT_VDSSE.SearchRequestMessage.sw)
}
inline void SearchRequestMessage::set_sw(const void* value, size_t size) {
  
  sw_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FT_VDSSE.SearchRequestMessage.sw)
}
inline std::string* SearchRequestMessage::_internal_mutable_sw() {
  
  return sw_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequestMessage::release_sw() {
  // @@protoc_insertion_point(field_release:FT_VDSSE.SearchRequestMessage.sw)
  
  return sw_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequestMessage::set_allocated_sw(std::string* sw) {
  if (sw != nullptr) {
    
  } else {
    
  }
  sw_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sw);
  // @@protoc_insertion_point(field_set_allocated:FT_VDSSE.SearchRequestMessage.sw)
}

// bytes st = 2;
inline void SearchRequestMessage::clear_st() {
  st_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchRequestMessage::st() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.SearchRequestMessage.st)
  return _internal_st();
}
inline void SearchRequestMessage::set_st(const std::string& value) {
  _internal_set_st(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.SearchRequestMessage.st)
}
inline std::string* SearchRequestMessage::mutable_st() {
  // @@protoc_insertion_point(field_mutable:FT_VDSSE.SearchRequestMessage.st)
  return _internal_mutable_st();
}
inline const std::string& SearchRequestMessage::_internal_st() const {
  return st_.GetNoArena();
}
inline void SearchRequestMessage::_internal_set_st(const std::string& value) {
  
  st_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchRequestMessage::set_st(std::string&& value) {
  
  st_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FT_VDSSE.SearchRequestMessage.st)
}
inline void SearchRequestMessage::set_st(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  st_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FT_VDSSE.SearchRequestMessage.st)
}
inline void SearchRequestMessage::set_st(const void* value, size_t size) {
  
  st_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FT_VDSSE.SearchRequestMessage.st)
}
inline std::string* SearchRequestMessage::_internal_mutable_st() {
  
  return st_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchRequestMessage::release_st() {
  // @@protoc_insertion_point(field_release:FT_VDSSE.SearchRequestMessage.st)
  
  return st_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchRequestMessage::set_allocated_st(std::string* st) {
  if (st != nullptr) {
    
  } else {
    
  }
  st_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), st);
  // @@protoc_insertion_point(field_set_allocated:FT_VDSSE.SearchRequestMessage.st)
}

// uint32 c1 = 3;
inline void SearchRequestMessage::clear_c1() {
  c1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchRequestMessage::_internal_c1() const {
  return c1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchRequestMessage::c1() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.SearchRequestMessage.c1)
  return _internal_c1();
}
inline void SearchRequestMessage::_internal_set_c1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  c1_ = value;
}
inline void SearchRequestMessage::set_c1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_c1(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.SearchRequestMessage.c1)
}

// bool first = 4;
inline void SearchRequestMessage::clear_first() {
  first_ = false;
}
inline bool SearchRequestMessage::_internal_first() const {
  return first_;
}
inline bool SearchRequestMessage::first() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.SearchRequestMessage.first)
  return _internal_first();
}
inline void SearchRequestMessage::_internal_set_first(bool value) {
  
  first_ = value;
}
inline void SearchRequestMessage::set_first(bool value) {
  _internal_set_first(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.SearchRequestMessage.first)
}

// -------------------------------------------------------------------

// SearchReply

// bytes ind = 1;
inline void SearchReply::clear_ind() {
  ind_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchReply::ind() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.SearchReply.ind)
  return _internal_ind();
}
inline void SearchReply::set_ind(const std::string& value) {
  _internal_set_ind(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.SearchReply.ind)
}
inline std::string* SearchReply::mutable_ind() {
  // @@protoc_insertion_point(field_mutable:FT_VDSSE.SearchReply.ind)
  return _internal_mutable_ind();
}
inline const std::string& SearchReply::_internal_ind() const {
  return ind_.GetNoArena();
}
inline void SearchReply::_internal_set_ind(const std::string& value) {
  
  ind_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchReply::set_ind(std::string&& value) {
  
  ind_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FT_VDSSE.SearchReply.ind)
}
inline void SearchReply::set_ind(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ind_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FT_VDSSE.SearchReply.ind)
}
inline void SearchReply::set_ind(const void* value, size_t size) {
  
  ind_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FT_VDSSE.SearchReply.ind)
}
inline std::string* SearchReply::_internal_mutable_ind() {
  
  return ind_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchReply::release_ind() {
  // @@protoc_insertion_point(field_release:FT_VDSSE.SearchReply.ind)
  
  return ind_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchReply::set_allocated_ind(std::string* ind) {
  if (ind != nullptr) {
    
  } else {
    
  }
  ind_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ind);
  // @@protoc_insertion_point(field_set_allocated:FT_VDSSE.SearchReply.ind)
}

// bytes proof = 2;
inline void SearchReply::clear_proof() {
  proof_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SearchReply::proof() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.SearchReply.proof)
  return _internal_proof();
}
inline void SearchReply::set_proof(const std::string& value) {
  _internal_set_proof(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.SearchReply.proof)
}
inline std::string* SearchReply::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:FT_VDSSE.SearchReply.proof)
  return _internal_mutable_proof();
}
inline const std::string& SearchReply::_internal_proof() const {
  return proof_.GetNoArena();
}
inline void SearchReply::_internal_set_proof(const std::string& value) {
  
  proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SearchReply::set_proof(std::string&& value) {
  
  proof_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FT_VDSSE.SearchReply.proof)
}
inline void SearchReply::set_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FT_VDSSE.SearchReply.proof)
}
inline void SearchReply::set_proof(const void* value, size_t size) {
  
  proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FT_VDSSE.SearchReply.proof)
}
inline std::string* SearchReply::_internal_mutable_proof() {
  
  return proof_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SearchReply::release_proof() {
  // @@protoc_insertion_point(field_release:FT_VDSSE.SearchReply.proof)
  
  return proof_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SearchReply::set_allocated_proof(std::string* proof) {
  if (proof != nullptr) {
    
  } else {
    
  }
  proof_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proof);
  // @@protoc_insertion_point(field_set_allocated:FT_VDSSE.SearchReply.proof)
}

// -------------------------------------------------------------------

// UpdateRequestMessage

// bytes l = 1;
inline void UpdateRequestMessage::clear_l() {
  l_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateRequestMessage::l() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.UpdateRequestMessage.l)
  return _internal_l();
}
inline void UpdateRequestMessage::set_l(const std::string& value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.UpdateRequestMessage.l)
}
inline std::string* UpdateRequestMessage::mutable_l() {
  // @@protoc_insertion_point(field_mutable:FT_VDSSE.UpdateRequestMessage.l)
  return _internal_mutable_l();
}
inline const std::string& UpdateRequestMessage::_internal_l() const {
  return l_.GetNoArena();
}
inline void UpdateRequestMessage::_internal_set_l(const std::string& value) {
  
  l_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateRequestMessage::set_l(std::string&& value) {
  
  l_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FT_VDSSE.UpdateRequestMessage.l)
}
inline void UpdateRequestMessage::set_l(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  l_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FT_VDSSE.UpdateRequestMessage.l)
}
inline void UpdateRequestMessage::set_l(const void* value, size_t size) {
  
  l_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FT_VDSSE.UpdateRequestMessage.l)
}
inline std::string* UpdateRequestMessage::_internal_mutable_l() {
  
  return l_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateRequestMessage::release_l() {
  // @@protoc_insertion_point(field_release:FT_VDSSE.UpdateRequestMessage.l)
  
  return l_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequestMessage::set_allocated_l(std::string* l) {
  if (l != nullptr) {
    
  } else {
    
  }
  l_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), l);
  // @@protoc_insertion_point(field_set_allocated:FT_VDSSE.UpdateRequestMessage.l)
}

// bytes e = 2;
inline void UpdateRequestMessage::clear_e() {
  e_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateRequestMessage::e() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.UpdateRequestMessage.e)
  return _internal_e();
}
inline void UpdateRequestMessage::set_e(const std::string& value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.UpdateRequestMessage.e)
}
inline std::string* UpdateRequestMessage::mutable_e() {
  // @@protoc_insertion_point(field_mutable:FT_VDSSE.UpdateRequestMessage.e)
  return _internal_mutable_e();
}
inline const std::string& UpdateRequestMessage::_internal_e() const {
  return e_.GetNoArena();
}
inline void UpdateRequestMessage::_internal_set_e(const std::string& value) {
  
  e_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateRequestMessage::set_e(std::string&& value) {
  
  e_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FT_VDSSE.UpdateRequestMessage.e)
}
inline void UpdateRequestMessage::set_e(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  e_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FT_VDSSE.UpdateRequestMessage.e)
}
inline void UpdateRequestMessage::set_e(const void* value, size_t size) {
  
  e_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FT_VDSSE.UpdateRequestMessage.e)
}
inline std::string* UpdateRequestMessage::_internal_mutable_e() {
  
  return e_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateRequestMessage::release_e() {
  // @@protoc_insertion_point(field_release:FT_VDSSE.UpdateRequestMessage.e)
  
  return e_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequestMessage::set_allocated_e(std::string* e) {
  if (e != nullptr) {
    
  } else {
    
  }
  e_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e);
  // @@protoc_insertion_point(field_set_allocated:FT_VDSSE.UpdateRequestMessage.e)
}

// bytes proof = 3;
inline void UpdateRequestMessage::clear_proof() {
  proof_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateRequestMessage::proof() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.UpdateRequestMessage.proof)
  return _internal_proof();
}
inline void UpdateRequestMessage::set_proof(const std::string& value) {
  _internal_set_proof(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.UpdateRequestMessage.proof)
}
inline std::string* UpdateRequestMessage::mutable_proof() {
  // @@protoc_insertion_point(field_mutable:FT_VDSSE.UpdateRequestMessage.proof)
  return _internal_mutable_proof();
}
inline const std::string& UpdateRequestMessage::_internal_proof() const {
  return proof_.GetNoArena();
}
inline void UpdateRequestMessage::_internal_set_proof(const std::string& value) {
  
  proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpdateRequestMessage::set_proof(std::string&& value) {
  
  proof_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FT_VDSSE.UpdateRequestMessage.proof)
}
inline void UpdateRequestMessage::set_proof(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FT_VDSSE.UpdateRequestMessage.proof)
}
inline void UpdateRequestMessage::set_proof(const void* value, size_t size) {
  
  proof_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FT_VDSSE.UpdateRequestMessage.proof)
}
inline std::string* UpdateRequestMessage::_internal_mutable_proof() {
  
  return proof_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateRequestMessage::release_proof() {
  // @@protoc_insertion_point(field_release:FT_VDSSE.UpdateRequestMessage.proof)
  
  return proof_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequestMessage::set_allocated_proof(std::string* proof) {
  if (proof != nullptr) {
    
  } else {
    
  }
  proof_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proof);
  // @@protoc_insertion_point(field_set_allocated:FT_VDSSE.UpdateRequestMessage.proof)
}

// -------------------------------------------------------------------

// ExecuteStatus

// bool status = 1;
inline void ExecuteStatus::clear_status() {
  status_ = false;
}
inline bool ExecuteStatus::_internal_status() const {
  return status_;
}
inline bool ExecuteStatus::status() const {
  // @@protoc_insertion_point(field_get:FT_VDSSE.ExecuteStatus.status)
  return _internal_status();
}
inline void ExecuteStatus::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ExecuteStatus::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:FT_VDSSE.ExecuteStatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace FT_VDSSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_FT_5fVDSSE_2eproto
