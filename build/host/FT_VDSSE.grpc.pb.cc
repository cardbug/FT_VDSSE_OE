// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: FT_VDSSE.proto

#include "FT_VDSSE.pb.h"
#include "FT_VDSSE.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace FT_VDSSE {

static const char* RPC_method_names[] = {
  "/FT_VDSSE.RPC/search",
  "/FT_VDSSE.RPC/update",
  "/FT_VDSSE.RPC/update2",
  "/FT_VDSSE.RPC/batch_update",
  "/FT_VDSSE.RPC/SendData",
};

std::unique_ptr< RPC::Stub> RPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RPC::Stub> stub(new RPC::Stub(channel));
  return stub;
}

RPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_search_(RPC_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_update_(RPC_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_update2_(RPC_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_batch_update_(RPC_method_names[3], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_SendData_(RPC_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::FT_VDSSE::SearchReply>* RPC::Stub::searchRaw(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request) {
  return ::grpc::internal::ClientReaderFactory< ::FT_VDSSE::SearchReply>::Create(channel_.get(), rpcmethod_search_, context, request);
}

::grpc::ClientAsyncReader< ::FT_VDSSE::SearchReply>* RPC::Stub::AsyncsearchRaw(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::FT_VDSSE::SearchReply>::Create(channel_.get(), cq, rpcmethod_search_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::FT_VDSSE::SearchReply>* RPC::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::FT_VDSSE::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::FT_VDSSE::SearchReply>::Create(channel_.get(), cq, rpcmethod_search_, context, request, false, nullptr);
}

::grpc::Status RPC::Stub::update(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::FT_VDSSE::ExecuteStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_update_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>* RPC::Stub::AsyncupdateRaw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::FT_VDSSE::ExecuteStatus>::Create(channel_.get(), cq, rpcmethod_update_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>* RPC::Stub::PrepareAsyncupdateRaw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::FT_VDSSE::ExecuteStatus>::Create(channel_.get(), cq, rpcmethod_update_, context, request, false);
}

::grpc::Status RPC::Stub::update2(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::FT_VDSSE::ExecuteStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_update2_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>* RPC::Stub::Asyncupdate2Raw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::FT_VDSSE::ExecuteStatus>::Create(channel_.get(), cq, rpcmethod_update2_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FT_VDSSE::ExecuteStatus>* RPC::Stub::PrepareAsyncupdate2Raw(::grpc::ClientContext* context, const ::FT_VDSSE::UpdateRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::FT_VDSSE::ExecuteStatus>::Create(channel_.get(), cq, rpcmethod_update2_, context, request, false);
}

::grpc::ClientWriter< ::FT_VDSSE::UpdateRequestMessage>* RPC::Stub::batch_updateRaw(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response) {
  return ::grpc::internal::ClientWriterFactory< ::FT_VDSSE::UpdateRequestMessage>::Create(channel_.get(), rpcmethod_batch_update_, context, response);
}

::grpc::ClientAsyncWriter< ::FT_VDSSE::UpdateRequestMessage>* RPC::Stub::Asyncbatch_updateRaw(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::FT_VDSSE::UpdateRequestMessage>::Create(channel_.get(), cq, rpcmethod_batch_update_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::FT_VDSSE::UpdateRequestMessage>* RPC::Stub::PrepareAsyncbatch_updateRaw(::grpc::ClientContext* context, ::FT_VDSSE::ExecuteStatus* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::FT_VDSSE::UpdateRequestMessage>::Create(channel_.get(), cq, rpcmethod_batch_update_, context, response, false, nullptr);
}

::grpc::Status RPC::Stub::SendData(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::FT_VDSSE::DataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendData_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::FT_VDSSE::DataResponse>* RPC::Stub::AsyncSendDataRaw(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::FT_VDSSE::DataResponse>::Create(channel_.get(), cq, rpcmethod_SendData_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::FT_VDSSE::DataResponse>* RPC::Stub::PrepareAsyncSendDataRaw(::grpc::ClientContext* context, const ::FT_VDSSE::DataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::FT_VDSSE::DataResponse>::Create(channel_.get(), cq, rpcmethod_SendData_, context, request, false);
}

RPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RPC::Service, ::FT_VDSSE::SearchRequestMessage, ::FT_VDSSE::SearchReply>(
          std::mem_fn(&RPC::Service::search), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>(
          std::mem_fn(&RPC::Service::update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>(
          std::mem_fn(&RPC::Service::update2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< RPC::Service, ::FT_VDSSE::UpdateRequestMessage, ::FT_VDSSE::ExecuteStatus>(
          std::mem_fn(&RPC::Service::batch_update), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::FT_VDSSE::DataRequest, ::FT_VDSSE::DataResponse>(
          std::mem_fn(&RPC::Service::SendData), this)));
}

RPC::Service::~Service() {
}

::grpc::Status RPC::Service::search(::grpc::ServerContext* context, const ::FT_VDSSE::SearchRequestMessage* request, ::grpc::ServerWriter< ::FT_VDSSE::SearchReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::update(::grpc::ServerContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::update2(::grpc::ServerContext* context, const ::FT_VDSSE::UpdateRequestMessage* request, ::FT_VDSSE::ExecuteStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::batch_update(::grpc::ServerContext* context, ::grpc::ServerReader< ::FT_VDSSE::UpdateRequestMessage>* reader, ::FT_VDSSE::ExecuteStatus* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::SendData(::grpc::ServerContext* context, const ::FT_VDSSE::DataRequest* request, ::FT_VDSSE::DataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace FT_VDSSE

